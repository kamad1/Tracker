

import UIKit

final class HabitPresenter: HabitPresenterProtocol {
    
    var delegate: NewHabitDelegate?
    
    var trackerName: String?
    
    var subTitleForCategory: String = ""
    
    var categories: [TrackerCategory]
    
    var selectedCategory: TrackerCategory?
    
    var view: HabitViewControllerProtocol?
    
    var type: TrackerType
    
    var schedule: [Int] = []
    
    var isValidForm: Bool {
        selectedCategory != nil && trackerName != nil && !schedule.isEmpty
    }
    
    init(type: TrackerType, categories: [TrackerCategory]) {
        self.type = type
        self.selectedCategory = categories.first
        self.categories = categories
    }
    
    // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä, –≤—ã–∑–æ–≤  –∏–∑ –¥–µ–ª–µ–≥–∞—Ç–∞, –≥–¥–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏—è —ë –∏–º—è –±–µ—Ä—ë–º —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤—ã—à–µ
    func createNewTracker() {
        guard let name = trackerName,
              let selectedCategory
        else { return }
        
        let newTracker = Tracker(id: UUID(), name: name, color: .ypSelection2 ?? .black, emoji: "üå∫", schedule: schedule)
        
        delegate?.didCreateTracker(newTracker, at: selectedCategory)
        
    }
    
}
